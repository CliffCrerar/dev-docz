{"remainingRequest":"/Users/cliff/dev-docz/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/cliff/dev-docz/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/cliff/dev-docz/node_modules/source-map-loader/index.js!/Users/cliff/dev-docz/src/pages/mongo/mongo-db.mdx","dependencies":[{"path":"/Users/cliff/dev-docz/src/pages/mongo/mongo-db.mdx","mtime":1566079314439},{"path":"/Users/cliff/dev-docz/node_modules/docz-core/node_modules/cache-loader/dist/cjs.js","mtime":1565343028858},{"path":"/Users/cliff/dev-docz/node_modules/babel-loader/lib/index.js","mtime":1565343028424},{"path":"/Users/cliff/dev-docz/node_modules/@mdx-js/loader/index.js","mtime":1565343032451},{"path":"/Users/cliff/dev-docz/node_modules/source-map-loader/index.js","mtime":1565343032158}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/cliff/dev-docz/src/pages/mongo/mongo-db.mdx"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"mongo-db-rest-api\"\n    }}>{`Mongo DB rest API`}</h1>\n    <h2 {...{\n      \"id\": \"dbcollectionfindone\"\n    }}><inlineCode parentName=\"h2\">{`db.collection.findOne`}</inlineCode></h2>\n    <p><strong parentName=\"p\">{`db.collection.findOne(query, projection)`}</strong></p>\n    <p>{`Returns one document that satisfies the specified query criteria on the collection or view. If multiple documents satisfy the query, this method returns the first document according to the natural order which reflects the order of documents on the disk. In capped collections, natural order is the same as insertion order. If no document satisfies the query, the method returns null.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Parameter`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`query`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`document`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional. Specifies query selection criteria using query operators.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`projection`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`document`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional. Specifies the fields to return using projection oper222                                                                                                                                                                             k                                                                                      mm ators. Omit this parameter to return all fields in the matching document.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Projection specifies fields to return`}</p>\n    </blockquote>\n    <p>{`The projection parameter takes a document of the following form:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`{ field1: boolean, field2: boolean ... }`}</inlineCode></p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"behavior\"\n    }}>{`Behavior`}</h3>\n    <p><strong parentName=\"p\">{`Client Disconnection`}</strong></p>\n    <p>{`Starting in MongoDB 4.2, if the client that issued the db.collection.findOne() disconnects before the operation completes, MongoDB marks the db.collection.findOne() for termination (i.e. killOp on the operation).`}</p>\n    <h2 {...{\n      \"id\": \"dbcollectionfindone-1\"\n    }}><inlineCode parentName=\"h2\">{`db.collection.findOne`}</inlineCode>{`;`}</h2>\n    <h3 {...{\n      \"id\": \"with-a-query-specification\"\n    }}>{`With a Query Specification`}</h3>\n    <p>{`The projection parameter specifies which fields to return. The parameter contains either include or exclude specifications, not both, unless the exclude is for the _id field.`}</p>\n    <h3 {...{\n      \"id\": \"specify-the-fields-to-return\"\n    }}>{`Specify the Fields to Return`}</h3>\n    <p>{`The following operation finds a document in the bios collection and returns only the name, contribs and _id fields:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`   db.collection.findOne(\n      { },\n      { name: 1, contribs: 1 }\n   )\n\n\ndb.collection.findOne(\n   {\n     $or: [\n            { 'name.first' : /^G/ },\n            { birth: { $lt: new Date('01/01/1945') } }\n          ]\n   }\n)\n`}</code></pre>\n    <p>{`Modifies and returns a single document. By default, the returned document does not include the modifications made on the update. To return the document with the modifications made on the update, use the new option. The findAndModify() method is a shell helper around the findAndModify command.`}</p>\n    <h2 {...{\n      \"id\": \"dbcollectionfindandmodify\"\n    }}><inlineCode parentName=\"h2\">{`db.collection.findAndModify()`}</inlineCode></h2>\n    <p>{`Modifies and returns a single document. By default, the returned document does not include the modifications made on the update. To return the document with the modifications made on the update, use the new option. The findAndModify() method is a shell helper around the `}<inlineCode parentName=\"p\">{`findAndModify`}</inlineCode>{` command.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`findAndModify()`}</inlineCode>{` method has the following form:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`db.collection.findAndModify({\n    query: document,\n    sort: document,\n    remove: document,\n    update: or-aggregation-pipeline, // Changed in MongoDB 4.2\n    new: document(),\n    fields: document,\n    upsert: document,\n    bypassDocumentValidation: document,\n    writeConcern: document,\n    collation: document,\n    arrayFilters: [ document, ... ]\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"dbcollectionfind\"\n    }}><inlineCode parentName=\"h2\">{`db.collection.find`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`@params (query, projection)`}</inlineCode></p>\n    <p>{`Selects `}<inlineCode parentName=\"p\">{`documents`}</inlineCode>{` in a collection or view and returns a cursor to the selected `}<inlineCode parentName=\"p\">{`documents`}</inlineCode>{`.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Parameter`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`query`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`document`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional. Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}).`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Projection`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`document`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional. Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. For details, see Projection.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Returns: A cursor to the documents that match the query criteria. When the `}<inlineCode parentName=\"p\">{`find()`}</inlineCode>{` method “returns `}<inlineCode parentName=\"p\">{`documents`}</inlineCode>{`,” the method is actually returning a cursor to the `}<inlineCode parentName=\"p\">{`documents`}</inlineCode>{`. `}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"behavior-1\"\n    }}>{`Behavior`}</h3>\n    <h4 {...{\n      \"id\": \"projection\"\n    }}>{`Projection`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`projection`}</inlineCode>{` parameter determines which fields are returned in the matching `}<inlineCode parentName=\"p\">{`documents`}</inlineCode>{`. The projection parameter takes a `}<inlineCode parentName=\"p\">{`document`}</inlineCode>{` of the following form:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`{ field1: value, field2: value ... }`}</inlineCode></p>\n    </blockquote>\n    <p>{`The `}<strong parentName=\"p\">{`value`}</strong>{` can be any of the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`1 or true to include the field in the return documents.`}</li>\n      <li parentName=\"ul\">{`0 or false to exclude the field.`}</li>\n      <li parentName=\"ul\">{`Expression using a Projection Operators.`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`find()`}</inlineCode>{` operations on views do not support the following projection operators:`}<ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`$`}</inlineCode></li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`$elemMatch`}</inlineCode></li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`$slice`}</inlineCode></li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`$meta`}</inlineCode></li>\n            </ul></li>\n        </ul></li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: For the `}<inlineCode parentName=\"p\">{`_id`}</inlineCode>{` field, you do not have to explicitly specify _id: 1 to return the `}<inlineCode parentName=\"p\">{`_id`}</inlineCode>{` field. The find() method always returns the `}<inlineCode parentName=\"p\">{`_id`}</inlineCode>{` field unless you specify `}<inlineCode parentName=\"p\">{`_id`}</inlineCode>{`: 0 to suppress the field.`}</p>\n    </blockquote>\n    <p>{`A `}<strong parentName=\"p\">{`projection`}</strong>{` cannot contain both include and exclude specifications, except for the exclusion of the `}<inlineCode parentName=\"p\">{`_id`}</inlineCode>{` field. In projections that explicitly include fields, the `}<inlineCode parentName=\"p\">{`_id`}</inlineCode>{` field is the only field that you can explicitly exclude.`}</p>\n    <h4 {...{\n      \"id\": \"cursor-handling\"\n    }}>{`Cursor Handling`}</h4>\n    <p>{`Executing `}<inlineCode parentName=\"p\">{`db.collection.find()`}</inlineCode>{` in the mongo shell automatically iterates the cursor to display up to the first 20 documents. Type it to continue iteration.`}</p>\n    <p>{`To access the returned documents with a driver, use the appropriate cursor handling mechanism for the driver language.`}</p>\n    <h4 {...{\n      \"id\": \"read-concern\"\n    }}>{`Read Concern`}</h4>\n    <p>{`To specify the read concern for `}<inlineCode parentName=\"p\">{`db.collection.find()`}</inlineCode>{`, use the `}<inlineCode parentName=\"p\">{`cursor.readConcern()`}</inlineCode>{` method.`}</p>\n    <h4 {...{\n      \"id\": \"type-bracketing\"\n    }}>{`Type Bracketing`}</h4>\n    <p>{`MongoDB treats some data types as equivalent for comparison purposes. For instance, numeric types undergo conversion before comparison. For most data types, however, comparison operators only perform comparisons on documents where the BSON type of the target field matches the type of the query operand. Consider the following collection:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`{ \"_id\": \"apples\", \"qty\": 5 }`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`{ \"_id\": \"bananas\", \"qty\": 7 }`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`{ \"_id\": \"oranges\", \"qty\": { \"in stock\": 8, \"ordered\": 12 } }`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`{ \"_id\": \"avocados\", \"qty\": \"fourteen\" }`}</inlineCode></p>\n    </blockquote>\n    <p>{`The following query uses $gt to return documents where the value of qty is greater than 4.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`db.collection.find( { qty: { $gt: 4 } } )`}</p>\n    </blockquote>\n    <p>{`The query returns the following documents:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`{ \"_id\": \"apples\", \"qty\": 5 }`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`{ \"_id\": \"bananas\", \"qty\": 7 }`}</inlineCode></p>\n    </blockquote>\n    <p>{`The document with _id equal to \"avocados\" is not returned because its qty value is of type string while the $gt operand is of type integer.`}</p>\n    <p>{`The document with _id equal to \"oranges\" is not returned because its qty value is of type object.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE To enforce data types in a collection, use Schema Validation.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"dbcollectionupdate\"\n    }}><inlineCode parentName=\"h2\">{`db.collection.Update`}</inlineCode></h2>\n    <h2 {...{\n      \"id\": \"insert-and-update-upsert\"\n    }}>{`Insert and Update (Upsert)`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`db.collection.update(query, update, options)`}</inlineCode></p>\n    </blockquote>\n    <p>{`Modifies an existing document or documents in a collection. The method can modify specific fields of an existing document or documents or replace an existing document entirely, depending on the update parameter.`}</p>\n    <p>{`By default, the db.collection.update() method updates a single document. Include the option multi: true to update all documents that match the query criteria.`}</p>\n    <h3 {...{\n      \"id\": \"the-update-method-parameter-model\"\n    }}>{`The update method parameter model`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-JS\"\n      }}>{`// example:\n\ndb.collection.update(\n   query,\nupdate,\n   {\n     upsert: boolean,\n     multi: boolean,\n     writeConcern: document,\n     collation: document,\n     arrayFilters: [ filterdocument1, ... ],\n     hint:  document||string        // Available starting in MongoDB 4.2\n   }\n)\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h2>\n    <p>{`The db.collection.update() method takes the following parameters:`}</p>\n    <h3 {...{\n      \"id\": \"the-colation-attribite-model\"\n    }}>{`The colation attribite model`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-JS\"\n      }}>{`// colation\n\nconst collation = {\n   locale: string,\n   caseLevel: boolean,\n   caseFirst: string,\n   strength: int,\n   numericOrdering: boolean,\n   alternate: string,\n   maxVariable: string,\n   backwards: boolean\n}\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"with-a-projection\"\n    }}>{`With a Projection`}</h3>\n    <h3 {...{\n      \"id\": \"more-parameters\"\n    }}>{`More `}<a parentName=\"h3\" {...{\n        \"href\": \"https://docs.mongodb.com/manual/reference/method/db.collection.update/#parameters\"\n      }}>{`parameters`}</a></h3>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}