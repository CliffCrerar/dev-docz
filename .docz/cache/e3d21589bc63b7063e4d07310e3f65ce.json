{"remainingRequest":"/Users/cliff/dev-docz/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/cliff/dev-docz/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/cliff/dev-docz/node_modules/source-map-loader/index.js!/Users/cliff/dev-docz/src/pages/live-server/live-server-doc.mdx","dependencies":[{"path":"/Users/cliff/dev-docz/src/pages/live-server/live-server-doc.mdx","mtime":1566764098521},{"path":"/Users/cliff/dev-docz/node_modules/docz-core/node_modules/cache-loader/dist/cjs.js","mtime":1565343028858},{"path":"/Users/cliff/dev-docz/node_modules/babel-loader/lib/index.js","mtime":1565343028424},{"path":"/Users/cliff/dev-docz/node_modules/@mdx-js/loader/index.js","mtime":1565343032451},{"path":"/Users/cliff/dev-docz/node_modules/source-map-loader/index.js","mtime":1565343032158}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/cliff/dev-docz/src/pages/live-server/live-server-doc.mdx"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"live-server\"\n    }}>{`Live Server`}</h1>\n    <p>{`This is a little development server with live reload capability. Use it for hacking your HTML/JavaScript/CSS files, but not for deploying the final site.`}</p>\n    <h3 {...{\n      \"id\": \"there-are-two-reasons-for-using-this\"\n    }}>{`There are two reasons for using this:`}</h3>\n    <p>{`AJAX requests don't work with the file:// protocol due to security restrictions, i.e. you need a server if your site fetches content through JavaScript.\nHaving the page reload automatically after changes to files can accelerate development.\nYou don't need to install any browser plugins or manually add code snippets to your pages for the reload functionality to work, see \"How it works\" section below for more information. If you don't want/need the live reload, you should probably use something even simpler, like the following Python-based one-liner:`}</p>\n    <p><inlineCode parentName=\"p\">{`python -m SimpleHTTPServer`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p>{`You need node.js and npm. You should probably install this globally.`}</p>\n    <h3 {...{\n      \"id\": \"npm-way\"\n    }}>{`Npm way`}</h3>\n    <p><inlineCode parentName=\"p\">{`npm install -g live-server`}</inlineCode></p>\n    <p>{`Manual way`}</p>\n    <p>{`git clone `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tapio/live-server\"\n      }}>{`https://github.com/tapio/live-server`}</a>{`\ncd live-server\nnpm install # Local dependencies if you want to hack\nnpm install -g # Install globally\nUsage from command line\nIssue the command live-server in your project's directory. Alternatively you can add the path to serve as a command line parameter.`}</p>\n    <p>{`This will automatically launch the default browser. When you make a change to any file, the browser will reload the page - unless it was a CSS file in which case the changes are applied without a reload.`}</p>\n    <h2 {...{\n      \"id\": \"command-line-parameters\"\n    }}>{`Command line parameters:`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`--port=NUMBER - select port to use, default: PORT env var or 8080\n\n--host=ADDRESS - select host address to bind to, default: IP env var or 0.0.0.0 (\"any address\")\n\n--no-browser - suppress automatic web browser launching\n\n--browser=BROWSER - specify browser to use instead of system default\n\n--quiet | -q - suppress logging\n\n--verbose | -V - more logging (logs all requests, shows all listening IPv4 interfaces, etc.)\n\n--open=PATH - launch browser to PATH instead of server root\n\n--watch=PATH - comma-separated string of paths to exclusively watch for changes (default: watch everything)\n\n--ignore=PATH - comma-separated string of paths to ignore (anymatch-compatible definition)\n\n--ignorePattern=RGXP - Regular expression of files to ignore (ie .*\\\\.jade) (DEPRECATED in favor of --ignore)\n\n--no-css-inject - reload page on CSS change, rather than injecting changed CSS\n\n--middleware=PATH - path to .js file exporting a middleware function to add; can be a name without path nor extension to reference bundled middlewares in middleware folder\n\n--entry-file=PATH - serve this file (server root relative) in place of missing files (useful for single page apps)\n\n--mount=ROUTE:PATH - serve the paths contents under the defined route (multiple definitions possible)\n\n--spa - translate requests from /abc to /#/abc (handy for Single Page Apps)\n\n--wait=MILLISECONDS - (default 100ms) wait for all changes, before reloading\n\n--htpasswd=PATH - Enables http-auth expecting htpasswd file located at PATH\n\n--cors - Enables CORS for any origin (reflects request origin, requests with credentials are supported)\n\n--https=PATH - PATH to a HTTPS configuration module\n\n--https-module=MODULE_NAME - Custom HTTPS module (e.g. spdy)\n\n--proxy=ROUTE:URL - proxy all requests for ROUTE to URL\n\n--help | -h - display terse usage hint and exit\n\n--version | -v - display version and exit\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"default-options\"\n    }}>{`Default options:`}</h2>\n    <p>{`If a file ~/.live-server.json exists it will be loaded and used as default options for live-server on the command line. See \"Usage from node\" for option names.`}</p>\n    <h2 {...{\n      \"id\": \"usage-from-node\"\n    }}>{`Usage from node`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`var liveServer = require(\"live-server\");\nvar params = {\n    port: 8181, // Set the server port. Defaults to 8080.\n    host: \"0.0.0.0\", // Set the address to bind to. Defaults to 0.0.0.0 or process.env.IP.\n    root: \"/public\", // Set root directory that's being served. Defaults to cwd.\n    open: false, // When false, it won't load your browser by default.\n    ignore: 'scss,my/templates', // comma-separated string for paths to ignore\n    file: \"index.html\", // When set, serve this file (server root relative) for every 404 (useful for single-page applications)\n    wait: 1000, // Waits for all changes, before reloading. Defaults to 0 sec.\n    mount: [['/components', './node_modules']], // Mount a directory to a route.\n    logLevel: 2, // 0 = errors only, 1 = some, 2 = lots\n    middleware: [function(req, res, next) { next(); }] // Takes an array of Connect-compatible middleware that are injected into the server middleware stack\n};\nliveServer.start(params);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"https\"\n    }}>{`HTTPS`}</h2>\n    <p>{`In order to enable HTTPS support, you'll need to create a configuration module. The module must export an object that will be used to configure a HTTPS server. The keys are the same as the keys in options for tls.createServer.`}</p>\n    <p>{`For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`var fs = require(\"fs\");\n \nmodule.exports = {\n    cert: fs.readFileSync(__dirname + \"/server.cert\"),\n    key: fs.readFileSync(__dirname + \"/server.key\"),\n    passphrase: \"12345\"\n};\n`}</code></pre>\n    <p>{`If using the node API, you can also directly pass a configuration object instead of a path to the module.`}</p>\n    <h2 {...{\n      \"id\": \"http2\"\n    }}>{`HTTP/2`}</h2>\n    <p>{`To get HTTP/2 support one can provide a custom HTTPS module via --https-module CLI parameter (httpsModule option for Node.js script). Be sure to install the module first. HTTP/2 unencrypted mode is not supported by browsers, thus not supported by live-server. See this question and can I use page on HTTP/2 for more details.`}</p>\n    <p>{`For example from CLI(bash):`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`live-server \\\\\n    --https=path/to/https.conf.js \\\\\n    --https-module=spdy \\\\\n    my-app-folder/\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"troubleshooting\"\n    }}>{`Troubleshooting`}</h2>\n    <p>{`No reload on changes\nOpen your browser's console: there should be a message at the top stating that live reload is enabled. Note that you will need a browser that supports WebSockets. If there are errors, deal with them. If it's still not working, file an issue.\nError: watch ENOSPC\nSee this suggested solution.\nReload works but changes are missing or outdated\nTry using --wait=MS option. Where MS is time in milliseconds to wait before issuing a reload.\nHow it works\nThe server is a simple node app that serves the working directory and its subdirectories. It also watches the files for changes and when that happens, it sends a message through a web socket connection to the browser instructing it to reload. In order for the client side to support this, the server injects a small piece of JavaScript code to each requested html file. This script establishes the web socket connection and listens to the reload requests. CSS files can be refreshed without a full page reload by finding the referenced stylesheets from the DOM and tricking the browser to fetch and parse them again.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}