(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{"./src/pages/mongo/mongo-db.mdx":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return l});var o=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),i={},c="wrapper";function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)(c,Object.assign({},i,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"mongo-db-rest-api"},"Mongo DB rest API"),Object(a.b)("h2",{id:"dbcollectionfindone"},Object(a.b)("inlineCode",{parentName:"h2"},"db.collection.findOne")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"db.collection.findOne(query, projection)")),Object(a.b)("p",null,"Returns one document that satisfies the specified query criteria on the collection or view. If multiple documents satisfy the query, this method returns the first document according to the natural order which reflects the order of documents on the disk. In capped collections, natural order is the same as insertion order. If no document satisfies the query, the method returns null."),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Parameter"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"query"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"document"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"Optional. Specifies query selection criteria using query operators.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"projection"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"document"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"Optional. Specifies the fields to return using projection oper222                                                                                                                                                                             k                                                                                      mm ators. Omit this parameter to return all fields in the matching document.")))),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Projection specifies fields to return")),Object(a.b)("p",null,"The projection parameter takes a document of the following form:"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("inlineCode",{parentName:"p"},"{ field1: boolean, field2: boolean ... }"))),Object(a.b)("h3",{id:"behavior"},"Behavior"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Client Disconnection")),Object(a.b)("p",null,"Starting in MongoDB 4.2, if the client that issued the db.collection.findOne() disconnects before the operation completes, MongoDB marks the db.collection.findOne() for termination (i.e. killOp on the operation)."),Object(a.b)("h2",{id:"dbcollectionfindone-1"},Object(a.b)("inlineCode",{parentName:"h2"},"db.collection.findOne"),";"),Object(a.b)("h3",{id:"with-a-query-specification"},"With a Query Specification"),Object(a.b)("p",null,"The projection parameter specifies which fields to return. The parameter contains either include or exclude specifications, not both, unless the exclude is for the _id field."),Object(a.b)("h3",{id:"specify-the-fields-to-return"},"Specify the Fields to Return"),Object(a.b)("p",null,"The following operation finds a document in the bios collection and returns only the name, contribs and _id fields:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"   db.collection.findOne(\n      { },\n      { name: 1, contribs: 1 }\n   )\n\n\ndb.collection.findOne(\n   {\n     $or: [\n            { 'name.first' : /^G/ },\n            { birth: { $lt: new Date('01/01/1945') } }\n          ]\n   }\n)\n")),Object(a.b)("p",null,"Modifies and returns a single document. By default, the returned document does not include the modifications made on the update. To return the document with the modifications made on the update, use the new option. The findAndModify() method is a shell helper around the findAndModify command."),Object(a.b)("h2",{id:"dbcollectionfindandmodify"},Object(a.b)("inlineCode",{parentName:"h2"},"db.collection.findAndModify()")),Object(a.b)("p",null,"Modifies and returns a single document. By default, the returned document does not include the modifications made on the update. To return the document with the modifications made on the update, use the new option. The findAndModify() method is a shell helper around the ",Object(a.b)("inlineCode",{parentName:"p"},"findAndModify")," command."),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"findAndModify()")," method has the following form:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"db.collection.findAndModify({\n    query: document,\n    sort: document,\n    remove: document,\n    update: or-aggregation-pipeline, // Changed in MongoDB 4.2\n    new: document(),\n    fields: document,\n    upsert: document,\n    bypassDocumentValidation: document,\n    writeConcern: document,\n    collation: document,\n    arrayFilters: [ document, ... ]\n});\n")),Object(a.b)("h2",{id:"dbcollectionfind"},Object(a.b)("inlineCode",{parentName:"h2"},"db.collection.find")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"@params (query, projection)")),Object(a.b)("p",null,"Selects ",Object(a.b)("inlineCode",{parentName:"p"},"documents")," in a collection or view and returns a cursor to the selected ",Object(a.b)("inlineCode",{parentName:"p"},"documents"),"."),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Parameter"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"query"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"document"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"Optional. Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}).")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"Projection"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"document"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"Optional. Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. For details, see Projection.")))),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Returns: A cursor to the documents that match the query criteria. When the ",Object(a.b)("inlineCode",{parentName:"p"},"find()")," method \u201creturns ",Object(a.b)("inlineCode",{parentName:"p"},"documents"),",\u201d the method is actually returning a cursor to the ",Object(a.b)("inlineCode",{parentName:"p"},"documents"),". ")),Object(a.b)("h3",{id:"behavior-1"},"Behavior"),Object(a.b)("h4",{id:"projection"},"Projection"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"projection")," parameter determines which fields are returned in the matching ",Object(a.b)("inlineCode",{parentName:"p"},"documents"),". The projection parameter takes a ",Object(a.b)("inlineCode",{parentName:"p"},"document")," of the following form:"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("inlineCode",{parentName:"p"},"{ field1: value, field2: value ... }"))),Object(a.b)("p",null,"The ",Object(a.b)("strong",{parentName:"p"},"value")," can be any of the following:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"1 or true to include the field in the return documents."),Object(a.b)("li",{parentName:"ul"},"0 or false to exclude the field."),Object(a.b)("li",{parentName:"ul"},"Expression using a Projection Operators.",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"find()")," operations on views do not support the following projection operators:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"$")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"$elemMatch")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"$slice")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"$meta"))))))),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"NOTE: For the ",Object(a.b)("inlineCode",{parentName:"p"},"_id")," field, you do not have to explicitly specify _id: 1 to return the ",Object(a.b)("inlineCode",{parentName:"p"},"_id")," field. The find() method always returns the ",Object(a.b)("inlineCode",{parentName:"p"},"_id")," field unless you specify ",Object(a.b)("inlineCode",{parentName:"p"},"_id"),": 0 to suppress the field.")),Object(a.b)("p",null,"A ",Object(a.b)("strong",{parentName:"p"},"projection")," cannot contain both include and exclude specifications, except for the exclusion of the ",Object(a.b)("inlineCode",{parentName:"p"},"_id")," field. In projections that explicitly include fields, the ",Object(a.b)("inlineCode",{parentName:"p"},"_id")," field is the only field that you can explicitly exclude."),Object(a.b)("h4",{id:"cursor-handling"},"Cursor Handling"),Object(a.b)("p",null,"Executing ",Object(a.b)("inlineCode",{parentName:"p"},"db.collection.find()")," in the mongo shell automatically iterates the cursor to display up to the first 20 documents. Type it to continue iteration."),Object(a.b)("p",null,"To access the returned documents with a driver, use the appropriate cursor handling mechanism for the driver language."),Object(a.b)("h4",{id:"read-concern"},"Read Concern"),Object(a.b)("p",null,"To specify the read concern for ",Object(a.b)("inlineCode",{parentName:"p"},"db.collection.find()"),", use the ",Object(a.b)("inlineCode",{parentName:"p"},"cursor.readConcern()")," method."),Object(a.b)("h4",{id:"type-bracketing"},"Type Bracketing"),Object(a.b)("p",null,"MongoDB treats some data types as equivalent for comparison purposes. For instance, numeric types undergo conversion before comparison. For most data types, however, comparison operators only perform comparisons on documents where the BSON type of the target field matches the type of the query operand. Consider the following collection:"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("inlineCode",{parentName:"p"},'{ "_id": "apples", "qty": 5 }'),"\n",Object(a.b)("inlineCode",{parentName:"p"},'{ "_id": "bananas", "qty": 7 }'),"\n",Object(a.b)("inlineCode",{parentName:"p"},'{ "_id": "oranges", "qty": { "in stock": 8, "ordered": 12 } }'),"\n",Object(a.b)("inlineCode",{parentName:"p"},'{ "_id": "avocados", "qty": "fourteen" }'))),Object(a.b)("p",null,"The following query uses $gt to return documents where the value of qty is greater than 4."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"db.collection.find( { qty: { $gt: 4 } } )")),Object(a.b)("p",null,"The query returns the following documents:"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("inlineCode",{parentName:"p"},'{ "_id": "apples", "qty": 5 }'),"\n",Object(a.b)("inlineCode",{parentName:"p"},'{ "_id": "bananas", "qty": 7 }'))),Object(a.b)("p",null,'The document with _id equal to "avocados" is not returned because its qty value is of type string while the $gt operand is of type integer.'),Object(a.b)("p",null,'The document with _id equal to "oranges" is not returned because its qty value is of type object.'),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"NOTE To enforce data types in a collection, use Schema Validation.")),Object(a.b)("h2",{id:"dbcollectionupdate"},Object(a.b)("inlineCode",{parentName:"h2"},"db.collection.Update")),Object(a.b)("h2",{id:"insert-and-update-upsert"},"Insert and Update (Upsert)"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("inlineCode",{parentName:"p"},"db.collection.update(query, update, options)"))),Object(a.b)("p",null,"Modifies an existing document or documents in a collection. The method can modify specific fields of an existing document or documents or replace an existing document entirely, depending on the update parameter."),Object(a.b)("p",null,"By default, the db.collection.update() method updates a single document. Include the option multi: true to update all documents that match the query criteria."),Object(a.b)("h3",{id:"the-update-method-parameter-model"},"The update method parameter model"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-JS"}),"// example:\n\ndb.collection.update(\n   query,\nupdate,\n   {\n     upsert: boolean,\n     multi: boolean,\n     writeConcern: document,\n     collation: document,\n     arrayFilters: [ filterdocument1, ... ],\n     hint:  document||string        // Available starting in MongoDB 4.2\n   }\n)\n\n")),Object(a.b)("h2",{id:"parameters"},"Parameters"),Object(a.b)("p",null,"The db.collection.update() method takes the following parameters:"),Object(a.b)("h3",{id:"the-colation-attribite-model"},"The colation attribite model"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-JS"}),"// colation\n\nconst collation = {\n   locale: string,\n   caseLevel: boolean,\n   caseFirst: string,\n   strength: int,\n   numericOrdering: boolean,\n   alternate: string,\n   maxVariable: string,\n   backwards: boolean\n}\n\n")),Object(a.b)("h3",{id:"with-a-projection"},"With a Projection"),Object(a.b)("h3",{id:"more-parameters"},"More ",Object(a.b)("a",Object.assign({parentName:"h3"},{href:"https://docs.mongodb.com/manual/reference/method/db.collection.update/#parameters"}),"parameters")))}l&&l===Object(l)&&Object.isExtensible(l)&&Object.defineProperty(l,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/pages/mongo/mongo-db.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=src-pages-mongo-mongo-db.62b746ce750e99d60fda.js.map